plugins {
    id 'com.bmuschko.docker-remote-api' version '6.7.0'
}

sourceSets {
    main {
        resources {
            srcDirs += "../shared-config"
        }
    }
}

apply from: "integrationTest.gradle"

dependencies {
    compile project(':data-prepper-api')
    compile project(':data-prepper-plugins')
    implementation "com.fasterxml.jackson.core:jackson-databind:${versionMap.jackson_databind}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${versionMap.jackson_dataformat_yaml}"
    implementation "javax.validation:validation-api:${versionMap.validation_api}"
    implementation "org.apache.bval:bval-extras:${versionMap.bval_extras}"
    implementation "org.apache.bval:bval-jsr:${versionMap.bval_jsr}"
    implementation "org.reflections:reflections:${versionMap.reflections}"
    implementation "io.micrometer:micrometer-core:1.5.1"
    implementation "io.micrometer:micrometer-registry-prometheus:1.5.1"
    testImplementation "org.hamcrest:hamcrest:${versionMap.hamcrest}"
    testImplementation "org.mockito:mockito-core:${versionMap.mockito}"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': 'com.amazon.dataprepper.DataPrepperExecute')
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule { //in addition to core projects rule
            limit {
                minimum = 0.90
            }
        }
    }
}
