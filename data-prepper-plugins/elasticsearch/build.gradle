buildscript {
    ext {
        es_version = System.getProperty("es.version", "7.8.0")
        es_group = "org.elasticsearch"
        distribution = 'oss-zip'
    }

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "${es_group}.gradle:build-tools:${es_version}"
    }
}

plugins {
    id 'java'
}
apply plugin: 'elasticsearch.testclusters'
apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.rest-test'

// To pass elasticsearch plugin check
ext {
    licenseFile = rootProject.file('LICENSE')
    noticeFile = rootProject.file('NOTICE')
}

dependencies {
    compile project(':data-prepper-api')
    testCompile project(':data-prepper-api').sourceSets.test.output
    compile project(':data-prepper-plugins:common')
    implementation "org.elasticsearch.client:elasticsearch-rest-high-level-client:${es_version}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${versionMap.jackson_databind}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${versionMap.jackson_dataformat_yaml}"
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    implementation "io.micrometer:micrometer-core:1.5.1"
    testImplementation("junit:junit:${versionMap.junit}") {
        exclude group:'org.hamcrest' // workaround for jarHell
    }
    testImplementation "org.elasticsearch.test:framework:${es_version}"
    testImplementation "commons-io:commons-io:2.8.0"
}

// Workaround for Werror
compileJava.options.warnings = false

// Resolve dependency conflict between ES sink and main project
configurations.all {
    resolutionStrategy {
        force 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.1'
        force 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
        force 'com.fasterxml.jackson.core:jackson-core:2.11.1'
        force 'com.google.guava:guava:30.1-jre'
        force 'org.apache.bval:bval-jsr:2.0.4'
        force 'junit:junit:4.13'
        force "org.hdrhistogram:HdrHistogram:2.1.12"
    }
}

test {
    if (System.getProperty("odfe.host") == null) {
        exclude '**/ODFETests.class'
    }
    systemProperty "odfe.host", System.getProperty("odfe.host")
    if (System.getProperty("odfe.user") != null) {
        systemProperty "odfe.user", System.getProperty("odfe.user")
        systemProperty "odfe.password", System.getProperty("odfe.password")
    }
}

integTest {}

testClusters.integTest {
    testDistribution = "OSS"
}

integTest.runner {
    systemProperty 'tests.security.manager', 'false'

    systemProperty "odfe", System.getProperty("odfe")
    systemProperty "user", System.getProperty("user")
    systemProperty "password", System.getProperty("password")
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    // TODO: find a way to include the classes covered by ES test framework
                    'com/amazon/dataprepper/plugins/sink/elasticsearch/ElasticsearchSink.class',
                    'com/amazon/dataprepper/plugins/sink/elasticsearch/IndexStateManagement.class'
            ])
        })
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            element = 'CLASS'
            excludes = [
                    // TODO: find a way to include the classes covered by ES test framework
                    'com.amazon.dataprepper.plugins.sink.elasticsearch.ElasticsearchSink',
                    'com.amazon.dataprepper.plugins.sink.elasticsearch.IndexStateManagement'
            ]
            limit {
                minimum = 0.90
            }
        }
    }
}

checkstyleMain.ignoreFailures = true
checkstyleTest.ignoreFailures = true
forbiddenApis.ignoreFailures = true
testingConventions.enabled = false
licenseHeaders.enabled = false
dependencyLicenses.enabled = false
thirdPartyAudit.enabled = false
validateNebulaPom.enabled = false